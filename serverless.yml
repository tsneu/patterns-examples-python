# Esse arquivo gera um micro serviço para ser adicionado a uma API ja definida
# Criação: serverless deploy --stage=dev --alias=dev --aws-profile <Usuário  AWS> -v
# OBS.: O propósito desse exemplo é o desenvolvimento do patterns. 
#       Por isso, as configurações de API foram omitidas.

service: patterns-test

frameworkVersion: ">=1.0.0 <2.0.0" # definição da versão utilizada no serverless

provider:
  name: aws
  runtime: python3.6 # Tecnologia usada
  stage: ${opt:stage, 'dev'} # dev|test|prod # Define o stage utilizado
  region: us-east-1 # Define a regiao em que seja criado
  memorySize: 128
  timeout: 30
  
  deploymentBucket:
    name: # Nome do bucket S3 utilizado para armazenar os arquivos de deploy
  #role: arn:aws:iam::{AWS_Account_ID}:role/{role_name}
  #vpc: ${file(./serverless-env.yml):${opt:stage, self:provider.stage}.vpc} # Define uma rede virtual para execução, é opcional mas quando definida necessita das informções contidas no arquivo serverless-env
  #endpointType: regional
  
  environment:
    STAGE: ${opt:stage, self:provider.stage} # variavel de ambiente usado junto com o config.ini
  
functions:
  estoque:
    handler: src/produto.lista
    description: Lista de produtos

  produto:
    handler: src/produto.get
    description: Dados do produto

  videos:
    handler: src/videso.lista
    description: Lista de videos do produto

  destaques:
    handler: src/home.destaques
    description: retorna o arquivo de destaques da home

  faq-get:
    handler: src/faq.get
    description: Busca as perguntas e respostas a respeito de um produto
    events:
      - http:
          path: faq/{produtoid}
          method: get
          cors: true
          integration: lambda
          requests:
            passThrough: WHEN_NO_TEMPLATES
#            template:
#              application/json: ${file(./configserverless/apigateway/templates/aws_default.txt)}

  faq-put:
    handler: src/faq.add
    description: Insere uma nova pergunta a respeito de um produto
    events:
      - http:
          path: faq/add
          method: post
          cors: true
          integration: lambda
          requests:
            passThrough: WHEN_NO_TEMPLATES
#            template:
#              application/json: ${file(./configserverless/apigateway/templates/aws_default.txt)}

plugins:
  - serverless-python-requirements

package:
  exclude:
    - .git/**
    - virtual_env/**
    - .requirements/**
    - README.md
    - package.json
    - package-lock.json